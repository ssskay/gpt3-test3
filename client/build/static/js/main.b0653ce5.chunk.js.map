{"version":3,"sources":["components/recordList.js","components/edit.js","components/create.js","App.js","index.js"],"names":["Record","props","record","name","position","level","RecordList","useState","records","setRecords","id","a","fetch","method","newRecords","filter","el","_id","useEffect","response","ok","message","statusText","window","alert","json","getRecords","length","class","className","style","marginTop","map","deleteRecord","to","Edit","form","setForm","params","useParams","navigate","useNavigate","updateForm","value","prev","e","preventDefault","editedPerson","body","JSON","stringify","headers","toString","fetchData","onSubmit","htmlFor","type","onChange","target","checked","Create","skill","statement","setId","aicorrectness","responseform","setResponseForm","choice","setChoice","toggle","setToggled","updateResponseForm","airesponse","then","res","catch","error","data","console","log","newPerson","choices","text","onClick","App","margin","exact","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0653ce5.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nconst Record = (props) => (\n  <tr>\n    <td>{props.record.name}</td>\n    <td>{props.record.position}</td>\n    <td>{props.record.level}</td>\n    {/* <td>\n      <Link className=\"btn btn-link\" to={`/edit/${props.record._id}`}>Edit</Link> |\n      <button className=\"btn btn-link\"\n        onClick={() => {\n          props.deleteRecord(props.record._id);\n        }}\n      >\n        Delete\n      </button>\n    </td> */}\n  </tr>\n);\n\nexport default function RecordList() {\n  const [records, setRecords] = useState([]);\n\n  // This method fetches the records from the database.\n  useEffect(() => {\n    async function getRecords() {\n      const response = await fetch(`http://localhost:5001/record/`);\n\n      if (!response.ok) {\n        const message = `An error occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const records = await response.json();\n      setRecords(records);\n    }\n\n    getRecords();\n\n    return; \n  }, [records.length]);\n\n  // This method will delete a record\n  async function deleteRecord(id) {\n    await fetch(`http://localhost:5001/${id}`, {\n      method: \"DELETE\"\n    });\n\n    const newRecords = records.filter((el) => el._id !== id);\n    setRecords(newRecords);\n  }\n\n  // This method will map out the records on the table\n  function recordList() {\n    return records.map((record) => {\n      return (\n        <Record\n          record={record}\n          deleteRecord={() => deleteRecord(record._id)}\n          key={record._id}\n        />\n      );\n    });\n  }\n\n  // This following section will display the table with the records of individuals.\n  return (\n    <div>\n      <h1>Welcome!</h1>\n      <h4>Thank you for helping us with our study! Today we are going to play a game against an AI. </h4>\n      <h5>You will be randomly assigned three types of logical statements to write and the AI will try to guess it correctly. \n        If you fool the AI, you get a point. Otherwise, the AI gets a point. Best of 3 wins! </h5>\n      <h5>Here are each of the categories:</h5>\n      <table class = 'table'>\n  <tr>\n    <th>Category</th>\n    <th>Description</th>\n    <th>Example</th>\n  </tr>\n  <tr>\n    <td>Capable of</td>\n    <td>Whether an object is capable of performing an action</td>\n    <td>A watch is capable of telling the past time</td>\n  </tr>\n  <tr>\n    <td>Long-tail knowledge</td>\n    <td>The question contains factual long-tail information</td>\n    <td>Washington DC is located further south than Washington State</td>\n  </tr>\n\n  <tr>\n    <td>Plausibility</td>\n    <td>Quantifiers or always-never relations</td>\n    <td>The peak of a mountain almost always reaches above the the tree line</td>\n  </tr>\n\n  <tr>\n    <td>Comparison</td>\n    <td>Comparison between two objects</td>\n    <td>The end of a baseball bat is larger than the handle</td>\n  </tr>\n\n  <tr>\n    <td>Physical</td>\n    <td>Physical commonsense</td>\n    <td>You build the walls on a house before putting on the roof</td>\n  </tr>\n\n  <tr>\n    <td>Causality</td>\n    <td>Cause and effect relations</td>\n    <td>If you get into an accident because you have been drinking alcohol, you will be arrested</td>\n  </tr>\n\n  <tr>\n    <td>Temporal</td>\n    <td>Temporal understanding</td>\n    <td>No one had ever reached the top of Mount Everest before 1977</td>\n  </tr>\n\n  <tr>\n    <td>Negation</td>\n    <td>A negation phrase</td>\n    <td>A mock trial is something with no legal consequence</td>\n  </tr>\n\n  <tr>\n    <td>Strategy</td>\n    <td>Reasoning steps are implicit and should be inferred using a strategy</td>\n    <td>Blood banks almost never take cash or checks as deposits</td>\n  </tr>\n\n  <tr>\n    <td>Event chain</td>\n    <td>Relating to the order of events</td>\n    <td>Putting on shoes is done in this order normally: slips shoes onto feet, then tie shoelaces</td>\n  </tr>\n\n</table>\n<h3> Current submissions:</h3>\n      <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Position</th>\n            <th>Level</th>\n\n          </tr>\n        </thead>\n        <tbody>{recordList()}</tbody>\n      </table>\n\n      <Link to=\"/create\">\n      <button className=\"nav-link\" to=\"/create\">\n      Start Game!\n      </button>\n      </Link>\n    </div>\n    \n  );\n \n  \n}\n","import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\n\nexport default function Edit() {\n  const [form, setForm] = useState({\n    name: \"\",\n    position: \"\",\n    level: \"\",\n    records: [],\n  });\n  const params = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      const response = await fetch(`http://localhost:5001/record/${params.id.toString()}`);\n\n      if (!response.ok) {\n        const message = `An error has occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const record = await response.json();\n      if (!record) {\n        window.alert(`Record with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n\n      setForm(record);\n    }\n\n    fetchData();\n\n    return;\n  }, [params.id, navigate]);\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    const editedPerson = {\n      name: form.name,\n      position: form.position,\n      level: form.level,\n    };\n\n    // This will send a post request to update the data in the database.\n    await fetch(`http://localhost:5001/update/${params.id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedPerson),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    });\n\n    navigate(\"/\");\n  }\n\n  // This following section will display the form that takes input from the user to update the data.\n  return (\n    <div>\n      <h3>Update Record</h3>\n      <form onSubmit={onSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Name: </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"name\"\n            value={form.name}\n            onChange={(e) => updateForm({ name: e.target.value })}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"position\">Position: </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"position\"\n            value={form.position}\n            onChange={(e) => updateForm({ position: e.target.value })}\n          />\n        </div>\n        <div className=\"form-group\">\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionIntern\"\n              value=\"Intern\"\n              checked={form.level === \"Intern\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionIntern\" className=\"form-check-label\">Intern</label>\n           </div>\n\n\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionCapableOf\"\n              value=\"CapableOf\"\n              checked={form.level === \"CapableOf\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionCapableOf\" className=\"form-check-label\">Capable of</label>\n          </div>\n\n\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionSenior\"\n              value=\"Senior\"\n              checked={form.level === \"Senior\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionSenior\" className=\"form-check-label\">Senior</label>\n        </div>\n        </div>\n        <br />\n\n        <div className=\"form-group\">\n          <input\n            type=\"submit\"\n            value=\"Update Record\"\n            className=\"btn btn-primary\"\n          />\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\n\nexport default function Create() {\n  const [form, setForm] = useState({\n    skill: \"\",\n    statement: \"\",\n    position: \"\",\n\n  });\n\n  const [id, setId] = useState()\n\n  const [responseform, setResponseForm] = useState({\n    aicorrectness: \"\",\n  });\n  const [choice, setChoice] = useState()\n  const [toggle, setToggled] = useState(false)\n\n  const navigate = useNavigate();\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n  function updateResponseForm(value) {\n    return setResponseForm((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n  async function rateAI(e){\n    e.preventDefault();\n     // When a post request is sent to the create url, we'll add a new record to the database.\n\n     const data = await fetch(`http://localhost:5001/record/update/${id}`, {\n       method: \"POST\",\n       headers: {\n         \"Content-Type\": \"application/json\",\n       },\n       body: JSON.stringify({...responseform,airesponse:choice}),\n     }) .then((res)=> res.json())  \n       .catch(error => {\n         window.alert(error);\n         return;\n       });\n       console.log(data)\n     setResponseForm({ aicorrectness: \"\"});\n\n  }\n\n  // This function will handle the submission.\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    // When a post request is sent to the create url, we'll add a new record to the database.\n    const newPerson = { ...form };\n\n    const data = await fetch(\"http://localhost:5001/record/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newPerson),\n    }) .then((res)=> res.json())  \n      .catch(error => {\n        window.alert(error);\n        return;\n      });\n      console.log(data)\n    setForm({ name: \"\", position: \"\", level: \"\" });\n    console.log(data.choices[0].text)\n    setChoice(data.choices[0].text)\n    setId(data._id)\n    // navigate(\"/\");\n  }\n\n\n  // This following section will display the form that takes the input from the user.\n  return (\n    <div>\n      <h3>Create New Submission</h3>\n      <form onSubmit={onSubmit}>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"position\">Statement</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"position\"\n            value={form.position}\n            onChange={(e) => updateForm({ position: e.target.value })}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"position\">Type of statement: </label>\n          <h3 > </h3>\n\n\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionCapableOf\"\n              value=\"CapableOf\"\n              checked={form.level === \"CapableOf\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionCapableOf\"\n              className=\"form-check-label\">Capable Of\n            </label>\n          </div>\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionLong-tailKnowledge\"\n              value=\"Long-tailKnowledge\"\n              checked={form.level === \"Long-tailKnowledge\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionLong-tailKnowledge\"\n            className=\"form-check-label\">Long-tail Knowledge\n            </label>\n          </div>\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionPlausibility\"\n              value=\"Plausibility\"\n              checked={form.level === \"Plausibility\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionPlausibility\"\n            className=\"form-check-label\">Plausibility\n            </label>\n          </div>\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionComparison\"\n              value=\"Comparison\"\n              checked={form.level === \"Comparison\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionComparison\"\n            className=\"form-check-label\">Comparison\n            </label>\n          </div>\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionPhysical\"\n              value=\"Physical\"\n              checked={form.level === \"Physical\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionPhysical\"\n            className=\"form-check-label\">Physical\n            </label>\n          </div>\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionCausality\"\n              value=\"Causality\"\n              checked={form.level === \"Causality\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionCausality\"\n            className=\"form-check-label\">Causality\n            </label>\n          </div>\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionTemporal\"\n              value=\"Temporal\"\n              checked={form.level === \"Temporal\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionTemporal\"\n            className=\"form-check-label\">Temporal\n            </label>\n          </div>\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionNegation\"\n              value=\"Negation\"\n              checked={form.level === \"Negation\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionNegation\"\n            className=\"form-check-label\">Negation\n            </label>\n          </div>\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionStrategy\"\n              value=\"Strategy\"\n              checked={form.level === \"Strategy\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionStrategy\"\n            className=\"form-check-label\">Strategy\n            </label>\n          </div>\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionEventChain\"\n              value=\"EventChain\"\n              checked={form.level === \"EventChain\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionEventChain\"\n            className=\"form-check-label\">Event Chain\n            </label>\n          </div>\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"submit\"\n            value=\"Ask the AI\"\n            className=\"btn btn-primary\"\n          />\n        \n        </div>\n      </form>\n    \n      <form onSubmit={rateAI}>\n\n<div className=\"form-group\">\n  <label htmlFor=\"position\">The AI's answer: </label>\n  <span>{choice}</span>\n</div>\n<div className=\"form-group\">\n  <label htmlFor=\"position\">Rate the AI's response: </label>\n  <h3 > </h3>\n\n  <div className=\"form-check form-check-inline\">\n    <input\n      className=\"form-check-input\"\n      type=\"radio\"\n      name=\"correct\"\n      id=\"correct\"\n      value=\"correct\"\n      checked={responseform.aicorrectness === \"correct\"}\n      onChange={(e) => updateResponseForm({ aicorrectness: e.target.value })}\n    />\n    <label htmlFor=\"correct\"\n      className=\"form-check-label\">Correct!\n    </label>\n  </div>\n\n  <div className=\"form-check form-check-inline\">\n    <input\n      className=\"form-check-input\"\n      type=\"radio\"\n      name=\"incorrect\"\n      id=\"incorrect\"\n      value=\"incorrect\"\n      checked={responseform.aicorrectness === \"incorrect\"}\n      onChange={(e) => updateResponseForm({ aicorrectness: e.target.value })}\n    />\n    <label htmlFor=\"incorrect\"\n    className=\"form-check-label\">Long-tail Knowledge\n    </label>\n  </div>\n  <div className=\"form-check form-check-inline\">\n    <input\n      className=\"form-check-input\"\n      type=\"radio\"\n      name=\"notApplicable\"\n      id=\"notApplicable\"\n      value=\"notApplicable\"\n      checked={responseform.aicorrectness === \"notApplicable\"}\n      onChange={(e) => updateResponseForm({ aicorrectness: e.target.value })}\n    />\n    <label htmlFor=\"notApplicable\"\n    className=\"form-check-label\">N/A (AI did not say true or false)\n    </label>\n  </div>\n  \n</div>\n<div className=\"form-group\">\n  <input\n    type=\"submit\"\n    value=\"Submit feedback\"\n    className=\"btn btn-primary\"\n  />\n \n</div>\n</form>\n      <h3> Reference Table</h3> <button className='btn btn-primary' onClick={() => setToggled(!toggle)}> Show Table</button>\n      {toggle && <table class='table'>\n        <tr>\n          <th>Category</th>\n          <th>Description</th>\n          <th>Example</th>\n        </tr>\n        <tr>\n          <td>Capable of</td>\n          <td>Whether an object is capable of performing an action</td>\n          <td>A watch is capable of telling the past time</td>\n        </tr>\n        <tr>\n          <td>Long-tail knowledge</td>\n          <td>The question contains factual long-tail information</td>\n          <td>Washington DC is located further south than Washington State</td>\n        </tr>\n\n        <tr>\n          <td>Plausibility</td>\n          <td>Quantifiers or always-never relations</td>\n          <td>The peak of a mountain almost always reaches above the the tree line</td>\n        </tr>\n\n        <tr>\n          <td>Comparison</td>\n          <td>Comparison between two objects</td>\n          <td>The end of a baseball bat is larger than the handle</td>\n        </tr>\n\n        <tr>\n          <td>Physical</td>\n          <td>Physical commonsense</td>\n          <td>You build the walls on a house before putting on the roof</td>\n        </tr>\n\n        <tr>\n          <td>Causality</td>\n          <td>Cause and effect relations</td>\n          <td>If you get into an accident because you have been drinking alcohol, you will be arrested</td>\n        </tr>\n\n        <tr>\n          <td>Temporal</td>\n          <td>Temporal understanding</td>\n          <td>No one had ever reached the top of Mount Everest before 1977</td>\n        </tr>\n\n        <tr>\n          <td>Negation</td>\n          <td>A negation phrase</td>\n          <td>A mock trial is something with no legal consequence</td>\n        </tr>\n\n        <tr>\n          <td>Strategy</td>\n          <td>Reasoning steps are implicit and should be inferred using a strategy</td>\n          <td>Blood banks almost never take cash or checks as deposits</td>\n        </tr>\n\n        <tr>\n          <td>Event chain</td>\n          <td>Relating to the order of events</td>\n          <td>Putting on shoes is done in this order normally: slips shoes onto feet, then tie shoelaces</td>\n        </tr>\n\n      </table>}\n    </div>\n  );\n}\n","import React from \"react\";\n\n// We use Route in order to define the different routes of our application\nimport { Route, Routes } from \"react-router-dom\";\n\n// We import all the components we need in our app\nimport RecordList from \"./components/recordList\";\nimport Edit from \"./components/edit\";\nimport Create from \"./components/create\";\n\nconst App = () => {\n  return (\n    <div>\n      <div style={{ margin: 20 }}>\n      <Routes>\n        <Route exact path=\"/\" element={<RecordList />} />\n        <Route path=\"/edit/:id\" element={<Edit />} />\n        <Route path=\"/create\" element={<Create />} />\n      </Routes>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}