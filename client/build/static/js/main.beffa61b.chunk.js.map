{"version":3,"sources":["components/navbar.js","components/recordList.js","components/edit.js","components/create.js","App.js","index.js"],"names":["Navbar","className","to","style","src","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Record","props","record","name","position","level","_id","onClick","deleteRecord","RecordList","useState","records","setRecords","a","fetch","method","newRecords","filter","el","useEffect","response","ok","message","statusText","window","alert","json","getRecords","length","class","marginTop","map","Edit","form","setForm","params","useParams","navigate","useNavigate","updateForm","value","prev","e","preventDefault","editedPerson","body","JSON","stringify","headers","toString","fetchData","onSubmit","htmlFor","onChange","target","checked","Create","skill","statement","newPerson","catch","error","App","margin","exact","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.beffa61b.chunk.js","sourcesContent":["import React from \"react\";\n\n// We import bootstrap to make our application look better.\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// We import NavLink to utilize the react router.\nimport { NavLink } from \"react-router-dom\";\n\n// Here, we display our Navbar\nexport default function Navbar() {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <NavLink className=\"navbar-brand\" to=\"/\">\n        <img style={{\"width\" : 25 + '%'}} src=\"https://d3cy9zhslanhfa.cloudfront.net/media/3800C044-6298-4575-A05D5C6B7623EE37/4B45D0EC-3482-4759-82DA37D8EA07D229/webimage-8A27671A-8A53-45DC-89D7BF8537F15A0D.png\"></img>\n        </NavLink>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item\">\n              <NavLink className=\"nav-link\" to=\"/create\">\n                Create Record\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nconst Record = (props) => (\n  <tr>\n    <td>{props.record.name}</td>\n    <td>{props.record.position}</td>\n    <td>{props.record.level}</td>\n    <td>\n      <Link className=\"btn btn-link\" to={`/edit/${props.record._id}`}>Edit</Link> |\n      <button className=\"btn btn-link\"\n        onClick={() => {\n          props.deleteRecord(props.record._id);\n        }}\n      >\n        Delete\n      </button>\n    </td>\n  </tr>\n);\n\nexport default function RecordList() {\n  const [records, setRecords] = useState([]);\n\n  // This method fetches the records from the database.\n  useEffect(() => {\n    async function getRecords() {\n      const response = await fetch(`http://localhost:5001/record/`);\n\n      if (!response.ok) {\n        const message = `An error occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const records = await response.json();\n      setRecords(records);\n    }\n\n    getRecords();\n\n    return; \n  }, [records.length]);\n\n  // This method will delete a record\n  async function deleteRecord(id) {\n    await fetch(`http://localhost:5001/${id}`, {\n      method: \"DELETE\"\n    });\n\n    const newRecords = records.filter((el) => el._id !== id);\n    setRecords(newRecords);\n  }\n\n  // This method will map out the records on the table\n  function recordList() {\n    return records.map((record) => {\n      return (\n        <Record\n          record={record}\n          deleteRecord={() => deleteRecord(record._id)}\n          key={record._id}\n        />\n      );\n    });\n  }\n\n  // This following section will display the table with the records of individuals.\n  return (\n    <div>\n      <h1>Welcome!</h1>\n      <h4>Thank you for helping us with our study! Today we are going to play a game against an AI. </h4>\n      <h5>You will be randomly assigned three types of logical statements to write and the AI will try to guess it correctly. \n        If you fool the AI, you get a point. Otherwise, the AI gets a point. Best of 3 wins! </h5>\n      <h5>Here are each of the categories:</h5>\n      <table class = 'table'>\n  <tr>\n    <th>Category</th>\n    <th>Description</th>\n    <th>Example</th>\n  </tr>\n  <tr>\n    <td>Capable of</td>\n    <td>Whether an object is capable of performing an action</td>\n    <td>A watch is capable of telling the past time</td>\n  </tr>\n  <tr>\n    <td>Long-tail knowledge</td>\n    <td>The question contains factual long-tail information</td>\n    <td>Washington DC is located further south than Washington State</td>\n  </tr>\n\n  <tr>\n    <td>Plausibility</td>\n    <td>Quantifiers or always-never relations</td>\n    <td>The peak of a mountain almost always reaches above the the tree line</td>\n  </tr>\n\n  <tr>\n    <td>Comparison</td>\n    <td>Comparison between two objects</td>\n    <td>The end of a baseball bat is larger than the handle</td>\n  </tr>\n\n  <tr>\n    <td>Physical</td>\n    <td>Physical commonsense</td>\n    <td>You build the walls on a house before putting on the roof</td>\n  </tr>\n\n  <tr>\n    <td>Causality</td>\n    <td>Cause and effect relations</td>\n    <td>If you get into an accident because you have been drinking alcohol, you will be arrested</td>\n  </tr>\n\n  <tr>\n    <td>Temporal</td>\n    <td>Temporal understanding</td>\n    <td>No one had ever reached the top of Mount Everest before 1977</td>\n  </tr>\n\n  <tr>\n    <td>Negation</td>\n    <td>A negation phrase</td>\n    <td>A mock trial is something with no legal consequence</td>\n  </tr>\n\n  <tr>\n    <td>Strategy</td>\n    <td>Reasoning steps are implicit and should be inferred using a strategy</td>\n    <td>Blood banks almost never take cash or checks as deposits</td>\n  </tr>\n\n  <tr>\n    <td>Event chain</td>\n    <td>Relating to the order of events</td>\n    <td>Putting on shoes is done in this order normally: slips shoes onto feet, then tie shoelaces</td>\n  </tr>\n\n</table>\n<h5>Please write a statement that is </h5>\n      \n      <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Position</th>\n            <th>Level</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>{recordList()}</tbody>\n      </table>\n\n      <Link to=\"/create\">\n      <button className=\"nav-link\" to=\"/create\">\n      Start Game!\n      </button>\n      </Link>\n    </div>\n    \n  );\n \n  \n}\n","import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\n\nexport default function Edit() {\n  const [form, setForm] = useState({\n    name: \"\",\n    position: \"\",\n    level: \"\",\n    records: [],\n  });\n  const params = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      const response = await fetch(`http://localhost:5001/record/${params.id.toString()}`);\n\n      if (!response.ok) {\n        const message = `An error has occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const record = await response.json();\n      if (!record) {\n        window.alert(`Record with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n\n      setForm(record);\n    }\n\n    fetchData();\n\n    return;\n  }, [params.id, navigate]);\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    const editedPerson = {\n      name: form.name,\n      position: form.position,\n      level: form.level,\n    };\n\n    // This will send a post request to update the data in the database.\n    await fetch(`http://localhost:5001/update/${params.id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedPerson),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    });\n\n    navigate(\"/\");\n  }\n\n  // This following section will display the form that takes input from the user to update the data.\n  return (\n    <div>\n      <h3>Update Record</h3>\n      <form onSubmit={onSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Name: </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"name\"\n            value={form.name}\n            onChange={(e) => updateForm({ name: e.target.value })}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"position\">Position: </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"position\"\n            value={form.position}\n            onChange={(e) => updateForm({ position: e.target.value })}\n          />\n        </div>\n        <div className=\"form-group\">\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionIntern\"\n              value=\"Intern\"\n              checked={form.level === \"Intern\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionIntern\" className=\"form-check-label\">Intern</label>\n           </div>\n\n\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionCapableOf\"\n              value=\"CapableOf\"\n              checked={form.level === \"CapableOf\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionCapableOf\" className=\"form-check-label\">Capable of</label>\n          </div>\n\n\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionSenior\"\n              value=\"Senior\"\n              checked={form.level === \"Senior\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionSenior\" className=\"form-check-label\">Senior</label>\n        </div>\n        </div>\n        <br />\n\n        <div className=\"form-group\">\n          <input\n            type=\"submit\"\n            value=\"Update Record\"\n            className=\"btn btn-primary\"\n          />\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\n\nexport default function Create() {\n  const [form, setForm] = useState({\n    skill: \"\",\n    statement: \"\",\n    position: \"\",\n    \n  });\n  const navigate = useNavigate();\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n  // This function will handle the submission.\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    // When a post request is sent to the create url, we'll add a new record to the database.\n    const newPerson = { ...form };\n\n    await fetch(\"http://localhost:5001/record/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newPerson),\n    })\n    .catch(error => {\n      window.alert(error);\n      return;\n    });\n\n    setForm({ name: \"\", position: \"\", level: \"\" });\n    navigate(\"/\");\n  }\n\n  // This following section will display the form that takes the input from the user.\n  return (\n    <div>\n      <h3>Create New Record</h3>\n      <form onSubmit={onSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Name</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"name\"\n            value={form.name}\n            onChange={(e) => updateForm({ name: e.target.value })}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"position\">Statement</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"position\"\n            value={form.position}\n            onChange={(e) => updateForm({ position: e.target.value })}\n          />\n        </div>\n        <div className=\"form-group\">\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionIntern\"\n              value=\"Intern\"\n              checked={form.level === \"Intern\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionIntern\" className=\"form-check-label\">Intern</label>\n          </div>\n\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionCapableOf\"\n              value=\"CapableOf\"\n              checked={form.level === \"CapableOf\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionCapableOf\" className=\"form-check-label\">Capable of</label>\n          </div>\n\n          \n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"positionOptions\"\n              id=\"positionSenior\"\n              value=\"Senior\"\n              checked={form.level === \"Senior\"}\n              onChange={(e) => updateForm({ level: e.target.value })}\n            />\n            <label htmlFor=\"positionSenior\" className=\"form-check-label\">Senior</label>\n          </div>\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"submit\"\n            value=\"Create person\"\n            className=\"btn btn-primary\"\n          />\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\n\n// We use Route in order to define the different routes of our application\nimport { Route, Routes } from \"react-router-dom\";\n\n// We import all the components we need in our app\nimport Navbar from \"./components/navbar\";\nimport RecordList from \"./components/recordList\";\nimport Edit from \"./components/edit\";\nimport Create from \"./components/create\";\n\nconst App = () => {\n  return (\n    <div>\n      <Navbar />\n      <div style={{ margin: 20 }}>\n      <Routes>\n        <Route exact path=\"/\" element={<RecordList />} />\n        <Route path=\"/edit/:id\" element={<Edit />} />\n        <Route path=\"/create\" element={<Create />} />\n      </Routes>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}